import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';

import 'package:hand_app/states/log/log_data_state.dart';
import 'package:hand_app/components/terminal/terminal_window_settings_interface.dart';
import 'package:hand_app/states/terminal/terminal_window_settings_state.dart';

class TerminalWindow extends StatefulWidget {
  final HandMainUdpLogReceiver udpLogReceiver;
  int maxLines; // Maximum number of lines to retain

  TerminalWindow({required this.udpLogReceiver, this.maxLines = 500});

  @override
  _TerminalWindowState createState() => _TerminalWindowState();

  void updateMaxLines(int newMaxLines) {
    maxLines = newMaxLines;
    // remove
  }
}

class _TerminalWindowState extends State<TerminalWindow> {
  bool _isExpanded = false;
  double _initialChildSize = 0.5; // Initial size
  double _fontSize = 16.0; // Default font size
  final List<HandMainLogMessage> _logMessages = [];
  final ScrollController _scrollController = ScrollController();
  double _lineHeight = 2.0; // Default line height
  final double _expandedLineHeight = 4.0; // Expanded line height
  bool _autoScroll = true; // Whether to auto-scroll to the bottom
  String? _errorText; // Error message for invalid input

  @override
  void initState() {
    super.initState();
    _setupLogReceiver();
    _setupScrollController();
  }

  void _removeExcessLogMessages() {
    while (_logMessages.length > widget.maxLines) {
      _logMessages.removeAt(
          0); // Remove the oldest message if the limit exceeds maxLines.
    }
  }

  void _setupLogReceiver() {
    widget.udpLogReceiver.logStream.listen((logMessage) {
      setState(() {
        _logMessages.add(logMessage);
        if (_logMessages.length > widget.maxLines) {
          _logMessages.removeAt(
              0); // Remove the oldest message if the limit exceeds maxLines.
        }
        if (_autoScroll) {
          _scrollToBottom();
        }
      });
    });
  }

  void _setupScrollController() {
    _scrollController.addListener(() {
      if (_scrollController.offset >=
              _scrollController.position.maxScrollExtent &&
          !_scrollController.position.outOfRange) {
        setState(() {
          _autoScroll = true;
        });
      } else {
        setState(() {
          _autoScroll = false;
        });
      }
    });
  }

  // Function to scroll to bottom
  void _scrollToBottom() {
    WidgetsBinding.instance?.addPostFrameCallback((_) {
      _scrollController.animateTo(
        _scrollController.position.maxScrollExtent,
        duration: Duration(milliseconds: 300),
        curve: Curves.easeOut,
      );
    });
  }

  // Function to show dialog and update max lines
  void _showMaxLinesDialog() {
    int tempMaxLines = widget.maxLines;
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text("Set Max Lines"),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                keyboardType: TextInputType.number,
                inputFormatters: [
                  FilteringTextInputFormatter.digitsOnly,
                ],
                decoration: InputDecoration(
                  hintText: "Enter max lines (up to 30000)",
                  errorText: _errorText,
                ),
                onChanged: (value) {
                  try {
                    if (value.isNotEmpty) {
                      tempMaxLines = int.parse(value);
                      if (tempMaxLines > 30000) {
                        tempMaxLines = 30000;
                      }
                      setState(() {
                        _errorText = null;
                      });
                    }
                  } catch (e) {
                    setState(() {
                      _errorText = 'Invalid number';
                    });
                  }
                },
              ),
              if (_errorText != null)
                Padding(
                  padding: const EdgeInsets.only(top: 8.0),
                  child: Row(
                    children: [
                      Icon(Icons.error, color: Colors.red),
                      SizedBox(width: 8),
                      Text(_errorText!, style: TextStyle(color: Colors.red)),
                    ],
                  ),
                ),
            ],
          ),
          actions: [
            TextButton(
              child: Text("Cancel"),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            TextButton(
              child: Text("OK"),
              onPressed: () {
                if (_errorText == null) {
                  setState(() {
                    widget.updateMaxLines(tempMaxLines);
                  });
                  Navigator.of(context).pop();
                }
              },
            ),
          ],
        );
      },
    );
  }

  // Returns the corresponding color based on the log level.
  Color _getLogColor(HandMainLogLevel level) {
    switch (level) {
      case HandMainLogLevel.error:
        return OneDarkProTheme.red;
      case HandMainLogLevel.warn:
        return OneDarkProTheme.yellow;
      case HandMainLogLevel.info:
        return OneDarkProTheme.green;
      case HandMainLogLevel.debug:
        return OneDarkProTheme.blue;
      case HandMainLogLevel.verbose:
        return OneDarkProTheme.cyan;
      default:
        return OneDarkProTheme.white;
    }
  }

  // Converts log level to its corresponding string representation
  String _logLevelToString(HandMainLogLevel level) {
    switch (level) {
      case HandMainLogLevel.error:
        return "ERROR";
      case HandMainLogLevel.warn:
        return "WARN";
      case HandMainLogLevel.info:
        return "INFO";
      case HandMainLogLevel.debug:
        return "DEBUG";
      case HandMainLogLevel.verbose:
        return "VERBOSE";
      default:
        return "INFO";
    }
  }

  // Toggle the expansion state of the terminal.
  void _toggleExpand() {
    setState(() {
      _isExpanded = !_isExpanded;
      _initialChildSize = _isExpanded ? 1.0 : 0.5;
      DraggableScrollableActuator.reset(context); // Reset to apply the new size
    });
  }

  // Function to set child size directly
  void _setChildSize(double size) {
    setState(() {
      _initialChildSize = size;
      DraggableScrollableActuator.reset(context); // Reset to apply the new size
    });
  }

  // Function to update font size
  void _updateFontSize(double newSize) {
    setState(() {
      _fontSize = newSize;
    });
  }

  @override
  Widget build(BuildContext context) {
    return DraggableScrollableActuator(
      child: DraggableScrollableSheet(
        initialChildSize:
            _initialChildSize, // Initial size depending on controller's childSize.
        minChildSize: 0.3, // Minimum size.
        maxChildSize: 1.0, // Maximum size.
        builder: (BuildContext context, ScrollController scrollController) {
          return Container(
            color: OneDarkProTheme.background, // Terminal background color.
            child: Column(
              children: [
                GestureDetector(
                  onVerticalDragUpdate: (details) {
                    _setChildSize((_initialChildSize -
                            details.primaryDelta! /
                                MediaQuery.of(context).size.height)
                        .clamp(0.3, 1.0));
                  },
                  child: MouseRegion(
                    cursor: SystemMouseCursors.resizeUpDown,
                    onEnter: (_) {
                      setState(() {
                        _lineHeight = _expandedLineHeight;
                      });
                    },
                    onExit: (_) {
                      setState(() {
                        _lineHeight = 2.0;
                      });
                    },
                    child: Container(
                      height: _lineHeight,
                      alignment: Alignment.bottomCenter,
                      color: Colors
                          .transparent, // Grey line to separate terminal and main content
                      child: Container(
                        height: _lineHeight,
                        width: double.infinity,
                        color: Colors.grey,
                      ),
                    ),
                  ),
                ),
                Row(
                  mainAxisAlignment:
                      MainAxisAlignment.end, // Align to the end of the row.
                  children: [
                    Tooltip(
                      message: 'Expand/Collapse',
                      child: IconButton(
                        icon: Icon(
                          _isExpanded
                              ? Icons.arrow_downward
                              : Icons.arrow_upward,
                          color: OneDarkProTheme.white,
                        ), // Icon for expanding/collapsing.
                        onPressed:
                            _toggleExpand, // Toggle expansion state when pressed.
                      ),
                    ),
                    Tooltip(
                      message: 'Increase Font Size',
                      child: IconButton(
                        icon: const Icon(Icons.text_increase,
                            color: OneDarkProTheme.white),
                        onPressed: () => _updateFontSize(
                            _fontSize + 1), // Increase font size
                      ),
                    ),
                    Tooltip(
                      message: 'Decrease Font Size',
                      child: IconButton(
                        icon: const Icon(Icons.text_decrease,
                            color: OneDarkProTheme.white),
                        onPressed: () => _updateFontSize(
                            _fontSize - 1), // Decrease font size
                      ),
                    ),
                    Tooltip(
                      message: 'Scroll to Bottom',
                      child: IconButton(
                        icon: const Icon(Icons.vertical_align_bottom_rounded,
                            color: OneDarkProTheme.white),
                        onPressed: _scrollToBottom, // Scroll to bottom
                      ),
                    ),
                    Tooltip(
                      message: 'Set Max Lines',
                      child: IconButton(
                        icon: const Icon(Icons.settings,
                            color: OneDarkProTheme.white),
                        onPressed:
                            _showMaxLinesDialog, // Show dialog to set max lines
                      ),
                    ),
                  ],
                ),
                Expanded(
                  child: SingleChildScrollView(
                    controller: _scrollController, // Scroll controller.
                    padding: const EdgeInsets.all(8.0),
                    child: SizedBox(
                      width: double.infinity, // Ensure horizontal fill
                      child: SelectableText.rich(
                        TextSpan(
                          children: _logMessages.map((logMessage) {
                            String formattedLog =
                                '${_logLevelToString(logMessage.level)} (${logMessage.timestamp}) [${logMessage.source}] ${logMessage.message}\n';
                            return TextSpan(
                              text: formattedLog,
                              style: TextStyle(
                                color: _getLogColor(logMessage.level),
                                fontSize: _fontSize,
                              ),
                            );
                          }).toList(),
                        ),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}
